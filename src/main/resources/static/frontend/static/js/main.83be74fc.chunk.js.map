{"version":3,"sources":["assets/get-your-card.png","assets/correctBell.mp3","assets/click.mp3","assets/loading-icon.gif","assets/flag.gif","assets/Facebook-share-button.png","components/IndexPage.tsx","models/phrase/Phrase.ts","config.js","models/card/BingoDTO.ts","service/BingoService.ts","service/Service.ts","components/card/BingoCard.tsx","components/MainApp.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","getYourCard","require","IndexPage","className","id","to","src","alt","React","Component","Phrase","phrase","isFree","gridPosition","this","config","API_URL","BingoDTO","playId","checkedPhraseIDs","card","getCard","Promise","resolve","reject","_get","then","catch","err","setChecked","phraseId","checked","setBingo","_post","_service_url","url","args","_headers","ignoreContentType","headers","localStorage","getItem","Authorization","Object","assign","fetch","resp","status","json","error","content","api","method","body","JSON","stringify","bellAudio","clickAudio","loadingIcon","flag","facebook","BingoCard","props","bell","UIfx","click","componentDidMount","service","cardDTO","phrases","splice","forEach","index","y","Math","floor","x","window","setTimeout","setState","loaded","resetGrid","onMarkSquare","play","markedPhrases","state","indexOf","console","log","push","filter","cPhrase","viewPhrase","checkForBingo","xRefs","hasBingo","grid","l2rRefs","r2lRefs","map","onClick","style","display","open","isMarked","key","MainApp","exact","path","component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.83be74fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/get-your-card.c589386c.png\";","module.exports = __webpack_public_path__ + \"static/media/correctBell.906a768a.mp3\";","module.exports = __webpack_public_path__ + \"static/media/click.a9f56569.mp3\";","module.exports = __webpack_public_path__ + \"static/media/loading-icon.53aede58.gif\";","module.exports = __webpack_public_path__ + \"static/media/flag.3e60cd03.gif\";","module.exports = __webpack_public_path__ + \"static/media/Facebook-share-button.23b7d045.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst getYourCard = require('../assets/get-your-card.png');\n\nexport default class IndexPage extends React.Component<any, any> {\n\n    public render() {\n        return(\n            <div className=\"row justify-content-center\" id=\"index-page\">\n                <div className=\"col-10\">\n                    <div className=\"index-info\">\n                        Add to the excitement of the daily TASK FORCE BRIEFING with the BINGO game that is SWEEPING AMERICA!\n                    </div>\n                    <div className=\"index-info\">\n                        Play with Anyone ANYWHERE!!\n                    </div>\n                    <div className=\"index-info\">\n                        Play with your Friends and Family in Lockdown!\n                    </div>\n                    <div className=\"index-info\">\n                        Great for Teaching Kids about Corona Events!\n                    </div>\n                    <div className=\"index-info\">\n                        Turn on the BRIEFING and GET YOUR BINGO CARD!\n                    </div>\n                </div>\n                <div className=\"col-9 col-md-12\" id=\"get-your-card\">\n                    <Link to=\"/card\">\n                        <img src={getYourCard} alt=\"get your card\" />\n                    </Link>\n                </div> \n            </div>\n        )\n    }\n}","export default class Phrase {\n\n    public id!: number;\n    public phrase!: string;\n    public isFree: boolean = false;\n    public gridPosition!: {y: number, x:  number};\n\n    constructor(phrase: string, isFree: boolean) {\n        this.phrase = phrase;\n        this.isFree = isFree;\n    }\n}","const dev = {\n    API_URL: \"http://localhost:8080\",\n}\n\nconst prod = {\n    API_URL: \"\"\n}\n\nexport const config = process.env.NODE_ENV === 'development' ? dev : prod;","export default class BingoDTO {\n\n    constructor(public playId: string, public checkedPhraseIDs: number[]){}\n}","import Service from \"./Service\";\nimport Card from \"../models/card/Card\";\nimport BingoDTO from \"../models/card/BingoDTO\";\n\nclass BingoService extends Service {\n\n    public card!: Card;\n    \n    public getCard = (): Promise<Card> => {\n        return new Promise<Card>((resolve, reject) => {\n            this._get<Card>(\"/api/getCard\")\n                .then((card: Card) => {\n                    this.card = card;\n                    resolve(card);\n                })\n                .catch((err: any) => reject(err))\n        })\n    }\n\n    public setChecked = (phraseId: number, checked: boolean): void => {\n        this._get(`/api/${checked ?  \"phraseChecked\" : \"phraseUnchecked\"}/${phraseId}/${this.card.playId}`);\n    }\n\n    public setBingo = (checkedPhraseIDs: number[]): void => {\n        this._post(`/api/setBingo`, new BingoDTO(this.card.playId, checkedPhraseIDs));\n    }\n}\n \nexport default new BingoService();\n","import { config } from '../config';\n\ninterface IAPIError {\n    status: number,\n    ok: boolean,\n    statusText: string,\n    body: any,\n    url: string\n}\n\nexport default class Service {\n    protected _service_url: string = config.API_URL;\n\n    protected api<T>(url: string, args: any, _headers?: any, ignoreContentType: boolean = false): Promise<T> {\n\n        let headers: any = (_headers)? _headers : {}\n        if (!headers['Content-Type'] && ignoreContentType === false) headers['Content-Type'] = 'application/json';\n        if (localStorage.getItem('token')) headers.Authorization = `Bearer ${localStorage.getItem('token')}`;\n        Object.assign(args, {\n            headers: headers\n        });\n\n        return (\n            fetch(this._service_url + url, args)\n                .then( resp => {\n                    if (resp.status === 200) {\n                        return Promise.resolve(resp.json());\n                    }\n                    return Promise.reject(resp);\n                })\n                .catch ((error: IAPIError) => {\n                    return Promise.reject(error);\n                })\n        )\n    };\n\n    protected _get<T>(url: string, content?: any): Promise<T> {\n        return this.api(url, {});\n    }\n\n    protected _post<T>(url: string, content: any): Promise<T> {\n        return this.api(url, {\n            method: 'POST',\n            body: JSON.stringify(content)\n        })\n    }\n\n    protected formPost<T>(url: string, content: FormData): Promise<T> {\n        return this.api(url, {\n            method: 'POST',\n            body: content\n        }, {}, true)\n    }\n\n    protected _patch<T>(url: string, content: any): Promise<T> {\n        return this.api(url, {\n            method: 'PATCH',\n            body: JSON.stringify(content)\n        })\n    }\n\n    protected _put<T>(url: string, content: any): Promise<T> {\n        return this.api(url, {\n            method: 'PUT',\n            body: JSON.stringify(content)\n        })\n    }\n\n    protected _delete<T>(url: string): Promise<T> {\n        return this.api(url, {method: 'DELETE'})\n    }\n\n}","import React, { Fragment } from 'react';\nimport UIfx from 'uifx';\n\nimport Phrase from '../../models/phrase/Phrase';\nimport service from '../../service/BingoService';\nimport CardDTO from '../../models/card/Card';\n\nconst bellAudio = require(\"../../assets/correctBell.mp3\");\nconst clickAudio = require(\"../../assets/click.mp3\");\nconst loadingIcon = require('../../assets/loading-icon.gif');\nconst flag = require('../../assets/flag.gif');\nconst facebook = require('../../assets/Facebook-share-button.png');\n\ninterface IState {\n    phrases: Phrase[],\n    loaded: boolean,\n    viewPhrase: Phrase | null,\n    markedPhrases: Phrase[],\n    hasBingo: boolean\n}\n\ntype point = {y: number, x: number};\n\nexport default class BingoCard extends React.Component<any, IState> {\n\n    private bell: UIfx = new UIfx(bellAudio);\n    private click: UIfx = new UIfx(clickAudio);\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            phrases: [],\n            loaded: false,\n            viewPhrase: null,\n            markedPhrases: [],\n            hasBingo: false\n        }\n    }\n\n    public componentDidMount = (): void => {\n        service.getCard()\n            .then((cardDTO: CardDTO) => {\n                let phrases: Phrase[] = cardDTO.phrases;\n                phrases.splice(12, 0, new Phrase(\"Free\", true));\n                phrases.forEach((phrase: Phrase, index: number) => {\n                    let y: number = Math.floor(index / 5);\n                    phrase.gridPosition = {y, x: index - y * 5}\n                })\n\n                window.setTimeout(() => {\n                    this.setState({phrases: cardDTO.phrases, loaded: true});\n                    this.resetGrid();\n                }, 3000)\n            })\n    }\n\n    private onMarkSquare = (phrase: Phrase): void => {\n        this.click.play();\n        let markedPhrases: Phrase[] = this.state.markedPhrases;\n\n        if (phrase) {\n            if (this.state.markedPhrases.indexOf(phrase) === -1) {\n                console.log(\"add\");\n                markedPhrases.push(phrase);\n                service.setChecked(phrase.id, true);\n            } else {\n                console.log(\"update\")\n                markedPhrases = markedPhrases.filter((cPhrase: Phrase) => cPhrase.id !== phrase.id);\n                service.setChecked(phrase.id, false);\n            }\n        }\n        this.setState({markedPhrases, viewPhrase: null}, this.checkForBingo);\n    }\n\n    private checkForBingo = (): void => {\n        let hasBingo: boolean = false;\n        let grid: boolean[][] = [\n                                    [false, false, false, false, false],\n                                    [false, false, false, false, false],\n                                    [false, false, false, false, false],\n                                    [false, false, false, false, false],\n                                    [false, false, false, false, false]\n                                ]\n\n        this.state.markedPhrases.forEach((phrase: Phrase) => {\n            grid[phrase.gridPosition.y][phrase.gridPosition.x] = true;\n        });\n\n        let xRefs: boolean[];\n        let l2rRefs: boolean[] = [];\n        let r2lRefs: boolean[] = [];\n\n        for (let x = 0; x < 5; x ++) {\n            xRefs = [];\n            for (let y = 0; y < 5; y ++) {\n                if (grid[y].indexOf(false) === - 1)  hasBingo = true; //row test\n                xRefs.push(grid[y][x]);\n                if (x === y) {\n                    l2rRefs.push(grid[y][x]);\n                    r2lRefs.push(grid[y][4-x])\n                }\n            }\n\n            if (xRefs.indexOf(false) === -1) {hasBingo = true; console.log(\"x\")} // column test\n\n            if (hasBingo) break;\n        }\n        \n        if (!hasBingo && (l2rRefs.indexOf(false) === -1 || r2lRefs.indexOf(false) === -1)) hasBingo = true; // diag tests\n       \n        if (hasBingo) {\n            this.bell.play();\n            this.setState({hasBingo});\n            console.log(this.state.markedPhrases);\n            service.setBingo(this.state.markedPhrases.filter((phrase: Phrase) => !phrase.isFree).map((phrase: Phrase) => phrase.id));\n        }\n    }\n\n    private resetGrid = (): void => {\n        this.setState({\n            viewPhrase: null,\n            hasBingo: false,\n            markedPhrases: [this.state.phrases[12]]\n        }); \n    }\n\n    public render() {\n        if (!this.state.loaded) {\n            return (\n                <div className=\"row justify-content-center\">\n                    <div className=\"col-9 col-2\" id=\"loading-panel\">\n                            <div className=\"inner text-center\">\n                                <span className=\"text\">BUILDING YOUR CARD!</span>\n                                <img src={loadingIcon} alt=\"loading icon\"/>\n                            </div>\n                    </div>\n                </div>\n            )\n        }\n\n        return(\n            <Fragment>\n                <div className=\"row justify-content-center\" id=\"bingo-card\">\n                    <div className=\"col-10\" id=\"intro\">\n                            MARK THE WORDS OR PHRASES YOU HEAR DURING THE BRIEFING!\n                            <br/>\n                            <small>Click on a square to mark and unmark it.</small>\n                            <br/>\n                            <small>It's just a game. Close COUNTS!</small>\n                    </div>\n                    <div className=\"grid\">\n                        <div className={`overlay ${this.state.viewPhrase !== null ? 'viewPhrase' : ''}`}>\n                            <div className=\"inner\">\n                                <h2>\n                                    {this.state.viewPhrase?.phrase}\n                                </h2> \n                                <button className=\"btn btn-success\" onClick={() => {}}>\n                                    {\n                                            //this.state.markedPhrases.indexOf(this.state.viewPhrase) !== -1 ? \"Unmark\" : \"Mark\"\n                                    }\n                                </button>\n                            </div>\n                        </div>\n                        <div className=\"overlay\" style={{display: this.state.hasBingo ? 'block' : 'none'}}>\n                            <div id=\"bingo-panel\">\n                                    <h1>BINGO!</h1>\n                                    <div>\n                                        <img \n                                            src={facebook} \n                                            alt=\"Share on Facebook\"\n                                            onClick={() => window.open(`https://www.facebook.com/dialog/feed?app_id=220488182712718&display=iframe&redirect_uri=https://www.briefingbingo.com/close&link=https://www.briefingbingo.com/bingo/${service.card.playId}`, \"myWindow\", \"width=600, height = 600\")}\n                                            />\n                                        <div className=\"popup-msg\">Will open in Popup!</div>\n                                    </div>\n                            </div>\n                        </div>\n                        {\n                            this.state.phrases.map((phrase: Phrase, index: number) => {\n                                let isMarked: boolean = this.state.markedPhrases.indexOf(phrase) !== -1;\n                                return (\n                                    <Fragment key={`square_${index}`}>\n                                        <div \n                                            className={`square`}\n                                            onClick={() => !phrase.isFree && !this.state.hasBingo ? this.onMarkSquare(phrase) : null}\n                                            >\n                                                {phrase.isFree &&\n                                                    <div className=\"inner\">\n                                                        <img src={flag} alt=\"flag\" />\n                                                        <span id=\"freedom-square\">Freedom Square</span>\n                                                    </div>\n                                                }\n                                                {!phrase.isFree &&\n                                                    <div className={`inner \n                                                                        ${isMarked ? \"marked-square\" : \"\"} \n                                                                        ${!phrase.isFree && !this.state.hasBingo ? \"active-square\" : \"\"}\n                                                                    `}>\n                                                        {phrase.phrase}\n                                                    </div>\n                                                }\n\n                                                <div className=\"marker\" style={{display: isMarked && !phrase.isFree ? 'block' : 'none'}}>\n                                                    X\n                                                </div>\n                                                \n                                                \n                                        </div>\n                                        {(index + 1) % 5 === 0 &&\n                                            <div className=\"clear\"></div>\n                                        }\n                                    </Fragment>\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport IndexPage from './IndexPage';\nimport BingoCard from './card/BingoCard';\n\nexport default class MainApp extends React.Component<any, any> {\n\n    public render() {\n        return(\n            <Switch>\n                <Route exact path=\"/\" component={IndexPage} />\n                <Route exact path=\"/card\" component={BingoCard} />\n            </Switch>\n        )\n    }\n}","import React, { Fragment } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport MainApp from './components/MainApp';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row justify-content-center\">\n          <div className=\"col-12 col-md-8 content-area\" id=\"content-center\">\n            <div className=\"row\">\n              <div className=\"col-12 nopadding text-center\" id=\"header\">\n                <span className=\"text-center title\">\n                  <small>TASK FORCE</small>\n                  <br/>\n                  Briefing BINGO!!\n                  </span>\n              </div>\n            </div>\n            <Fragment>\n              <Router>\n                <MainApp />\n              </Router>\n            </Fragment>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}