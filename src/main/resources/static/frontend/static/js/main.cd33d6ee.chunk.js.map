{"version":3,"sources":["assets/correctBell.mp3","components/IndexPage.tsx","models/phrase/Phrase.ts","config.js","service/BingoService.ts","service/Service.ts","components/card/BingoCard.tsx","components/MainApp.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","IndexPage","to","React","Component","Phrase","phrase","isFree","id","gridPosition","this","config","API_URL","card","getCard","Promise","resolve","reject","_get","then","catch","err","setChecked","phraseId","checked","playId","setBingo","_service_url","url","args","_headers","ignoreContentType","headers","localStorage","getItem","Authorization","Object","assign","fetch","resp","status","json","error","content","api","method","body","JSON","stringify","bellAudio","require","BingoCard","props","bell","UIfx","componentDidMount","service","cardDTO","phrases","splice","forEach","index","y","Math","floor","x","setState","loaded","resetGrid","onMarkSquare","markedPhrases","state","viewPhrase","indexOf","push","filter","checkForBingo","xRefs","hasBingo","grid","l2rRefs","r2lRefs","console","log","play","className","map","isMarked","key","onClick","MainApp","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cd33d6ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/correctBell.906a768a.mp3\";","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class IndexPage extends React.Component<any, any> {\n\n    public render() {\n        return(\n            <div>\n                <Link to=\"/card\">Bingo Card</Link>\n            </div>\n        )\n    }\n}","export default class Phrase {\n\n    public id!: number;\n    public phrase!: string;\n    public isFree: boolean = false;\n    public gridPosition!: {y: number, x:  number};\n\n    constructor(phrase: string, isFree: boolean) {\n        this.phrase = phrase;\n        this.isFree = isFree;\n    }\n}","const dev = {\n    API_URL: \"http://localhost:8080\",\n}\n\nconst prod = {\n    API_URL: \"\"\n}\n\nexport const config = process.env.NODE_ENV === 'development' ? dev : prod;","import Service from \"./Service\";\nimport Card from \"../models/card/Card\";\n\nclass BingoService extends Service {\n\n    public card!: Card;\n    \n    public getCard = (): Promise<Card> => {\n        return new Promise<Card>((resolve, reject) => {\n            this._get<Card>(\"/api/getCard\")\n                .then((card: Card) => {\n                    this.card = card;\n                    resolve(card);\n                })\n                .catch((err: any) => reject(err))\n        })\n    }\n\n    public setChecked = (phraseId: number, checked: boolean): void => {\n        this._get(`/api/${checked ?  \"phraseChecked\" : \"phraseUnchecked\"}/${phraseId}/${this.card.playId}`);\n    }\n\n    public setBingo = (): void => {\n        this._get(`/api/setBingo/${this.card.playId}`);\n    }\n}\n \nexport default new BingoService();\n","import { config } from '../config';\n\ninterface IAPIError {\n    status: number,\n    ok: boolean,\n    statusText: string,\n    body: any,\n    url: string\n}\n\nexport default class Service {\n    protected _service_url: string = config.API_URL;\n\n    protected api<T>(url: string, args: any, _headers?: any, ignoreContentType: boolean = false): Promise<T> {\n\n        let headers: any = (_headers)? _headers : {}\n        if (!headers['Content-Type'] && ignoreContentType === false) headers['Content-Type'] = 'application/json';\n        if (localStorage.getItem('token')) headers.Authorization = `Bearer ${localStorage.getItem('token')}`;\n        Object.assign(args, {\n            headers: headers\n        });\n\n        return (\n            fetch(this._service_url + url, args)\n                .then( resp => {\n                    if (resp.status === 200) {\n                        return Promise.resolve(resp.json());\n                    }\n                    return Promise.reject(resp);\n                })\n                .catch ((error: IAPIError) => {\n                    return Promise.reject(error);\n                })\n        )\n    };\n\n    protected _get<T>(url: string, content?: any): Promise<T> {\n        return this.api(url, {});\n    }\n\n    protected _post<T>(url: string, content: any): Promise<T> {\n        return this.api(url, {\n            method: 'POST',\n            body: JSON.stringify(content)\n        })\n    }\n\n    protected formPost<T>(url: string, content: FormData): Promise<T> {\n        return this.api(url, {\n            method: 'POST',\n            body: content\n        }, {}, true)\n    }\n\n    protected _patch<T>(url: string, content: any): Promise<T> {\n        return this.api(url, {\n            method: 'PATCH',\n            body: JSON.stringify(content)\n        })\n    }\n\n    protected _put<T>(url: string, content: any): Promise<T> {\n        return this.api(url, {\n            method: 'PUT',\n            body: JSON.stringify(content)\n        })\n    }\n\n    protected _delete<T>(url: string): Promise<T> {\n        return this.api(url, {method: 'DELETE'})\n    }\n\n}","import React, { Fragment } from 'react';\nimport UIfx from 'uifx';\n\nimport Phrase from '../../models/phrase/Phrase';\nimport service from '../../service/BingoService';\nimport CardDTO from '../../models/card/Card';\n\nconst bellAudio = require(\"../../assets/correctBell.mp3\");\n\ninterface IState {\n    phrases: Phrase[],\n    loaded: boolean,\n    viewPhrase: Phrase | null,\n    markedPhrases: Phrase[],\n    hasBingo: boolean\n}\n\ntype point = {y: number, x: number};\n\nexport default class BingoCard extends React.Component<any, IState> {\n\n    private bell: UIfx = new UIfx(bellAudio);\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            phrases: [],\n            loaded: false,\n            viewPhrase: null,\n            markedPhrases: [],\n            hasBingo: false\n        }\n    }\n\n    public componentDidMount = (): void => {\n        service.getCard()\n            .then((cardDTO: CardDTO) => {\n                let phrases: Phrase[] = cardDTO.phrases;\n                phrases.splice(12, 0, new Phrase(\"Free\", true));\n                phrases.forEach((phrase: Phrase, index: number) => {\n                    let y: number = Math.floor(index / 5);\n                    phrase.gridPosition = {y, x: index - y * 5}\n                })\n                this.setState({phrases: cardDTO.phrases, loaded: true});\n                this.resetGrid();\n            })\n    }\n\n    private onMarkSquare = (): void => {\n        let markedPhrases: Phrase[] = this.state.markedPhrases;\n\n        if (this.state.viewPhrase) {\n            if (this.state.markedPhrases.indexOf(this.state.viewPhrase) === -1) {\n                markedPhrases.push(this.state.viewPhrase);\n                service.setChecked(this.state.viewPhrase.id, true);\n            } else {\n                markedPhrases = markedPhrases.filter((phrase: Phrase) => phrase.id !== this.state.viewPhrase?.id);\n                service.setChecked(this.state.viewPhrase.id, false);\n            }\n        }\n        this.setState({markedPhrases, viewPhrase: null}, this.checkForBingo);\n    }\n\n    private checkForBingo = (): void => {\n        let hasBingo: boolean = false;\n        let grid: boolean[][] = [\n                                    [false, false, false, false, false],\n                                    [false, false, false, false, false],\n                                    [false, false, false, false, false],\n                                    [false, false, false, false, false],\n                                    [false, false, false, false, false]\n                                ]\n\n        this.state.markedPhrases.forEach((phrase: Phrase) => {\n            grid[phrase.gridPosition.y][phrase.gridPosition.x] = true;\n        });\n\n        let xRefs: boolean[];\n        let l2rRefs: boolean[] = [];\n        let r2lRefs: boolean[] = [];\n\n        for (let x = 0; x < 5; x ++) {\n            xRefs = [];\n            for (let y = 0; y < 5; y ++) {\n                if (grid[y].indexOf(false) === - 1)  hasBingo = true; //row test\n                xRefs.push(grid[y][x]);\n                if (x === y) {\n                    l2rRefs.push(grid[y][x]);\n                    r2lRefs.push(grid[y][4-x])\n                }\n            }\n\n            if (xRefs.indexOf(false) === -1) {hasBingo = true; console.log(\"x\")} // column test\n\n            if (hasBingo) break;\n        }\n        \n        if (!hasBingo && (l2rRefs.indexOf(false) === -1 || r2lRefs.indexOf(false) === -1)) hasBingo = true; // diag tests\n        \n        if (hasBingo) {\n            this.bell.play();\n            this.setState({hasBingo});\n            service.setBingo();\n        }\n    }\n\n    private resetGrid = (): void => {\n        this.setState({\n            viewPhrase: null,\n            hasBingo: false,\n            markedPhrases: [this.state.phrases[12]]\n        }); \n    } \n\n    public render() {\n        if (!this.state.loaded) {\n            return (\n                <div>Loading...</div>\n            )\n        }\n\n        return(\n            <Fragment>\n                <div className=\"row justify-content-center\">\n                    <div className=\"col-12 col-md-7 grid\">\n                        {!this.state.viewPhrase &&\n                            this.state.phrases.map((phrase: Phrase, index: number) => {\n                                let isMarked: boolean = this.state.markedPhrases.indexOf(phrase) !== -1;\n                                return (\n                                    <Fragment key={`square_${index}`}>\n                                        <div \n                                            className={`square`}\n                                            onClick={() => !phrase.isFree && !this.state.hasBingo ? this.setState({viewPhrase: phrase}) : null}\n                                            >\n                                            <div className={`inner \n                                                                ${isMarked ? \"marked-square\" : \"\"} \n                                                                ${!phrase.isFree && !this.state.hasBingo ? \"active-square\" : \"\"}\n                                                            `}>\n                                                {phrase.phrase}\n                                            </div>\n                                        </div>\n                                        {(index + 1) % 5 === 0 &&\n                                            <div className=\"clear\"></div>\n                                        }\n                                    </Fragment>\n                                )\n                            })\n                        }\n                        {this.state.viewPhrase &&\n                            <div className=\"row viewPhrase justify-content-center\">\n                                <div className=\"col-10 col-md-8 inner\">\n                                    <div className=\"row\">\n                                        <div className=\"col-12 text-center\">\n                                            <h2>\n                                                {this.state.viewPhrase.phrase}\n                                            </h2>\n                                        </div>\n                                        <div className=\"col-12 text-center\">\n                                            <button className=\"btn btn-success\" onClick={this.onMarkSquare}>\n                                                {\n                                                     this.state.markedPhrases.indexOf(this.state.viewPhrase) !== -1 ? \"Unmark\" : \"Mark\"\n                                                }\n                                            </button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport IndexPage from './IndexPage';\nimport BingoCard from './card/BingoCard';\n\nexport default class MainApp extends React.Component<any, any> {\n\n    public render() {\n        return(\n            <Switch>\n                <Route exact path=\"/\" component={IndexPage} />\n                <Route exact path=\"/card\" component={BingoCard} />\n            </Switch>\n        )\n    }\n}","import React, { Fragment } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport MainApp from './components/MainApp';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <Fragment>\n          <Router>\n            <MainApp />\n          </Router>\n        </Fragment>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}